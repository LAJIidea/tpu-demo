#loc = loc(unknown)
module @TorchSample attributes {module.chip = "ALL", module.platform = "ONNX", module.state = "TOP_F32", module.weight_file = "torchsample_top_f32_all_origin_weight.npz"} {
  func.func @main(%arg0: tensor<1x1x224x224xf32> loc(unknown)) -> tensor<*xf32> {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) {channel_format = "nchw", keep_aspect_ratio = false, keep_ratio_mode = "letterbox", mean = [0.000000e+00, 0.000000e+00, 0.000000e+00], pad_type = "center", pad_value = 0 : i64, pixel_format = "bgr", resize_dims = [224, 224], scale = [0.0039216000586748123, 0.0039216000586748123, 0.0039216000586748123]} : (tensor<1x1x224x224xf32>) -> tensor<1x1x224x224xf32> loc(#loc1)
    %2 = "top.Weight"() : () -> tensor<64x1x5x5xf32> loc(#loc2)
    %3 = "top.Weight"() : () -> tensor<64xf32> loc(#loc3)
    %4 = "top.Conv"(%1, %2, %3) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, group = 1 : i64, kernel_shape = [5, 5], pads = [2, 2, 2, 2], strides = [1, 1]} : (tensor<1x1x224x224xf32>, tensor<64x1x5x5xf32>, tensor<64xf32>) -> tensor<*xf32> loc(#loc4)
    %5 = "top.Relu"(%4) : (tensor<*xf32>) -> tensor<*xf32> loc(#loc5)
    %6 = "top.Weight"() : () -> tensor<64x64x3x3xf32> loc(#loc6)
    %7 = "top.Weight"() : () -> tensor<64xf32> loc(#loc7)
    %8 = "top.Conv"(%5, %6, %7) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]} : (tensor<*xf32>, tensor<64x64x3x3xf32>, tensor<64xf32>) -> tensor<*xf32> loc(#loc8)
    %9 = "top.Relu"(%8) : (tensor<*xf32>) -> tensor<*xf32> loc(#loc9)
    %10 = "top.Weight"() : () -> tensor<32x64x3x3xf32> loc(#loc10)
    %11 = "top.Weight"() : () -> tensor<32xf32> loc(#loc11)
    %12 = "top.Conv"(%9, %10, %11) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]} : (tensor<*xf32>, tensor<32x64x3x3xf32>, tensor<32xf32>) -> tensor<*xf32> loc(#loc12)
    %13 = "top.Relu"(%12) : (tensor<*xf32>) -> tensor<*xf32> loc(#loc13)
    %14 = "top.Weight"() : () -> tensor<9x32x3x3xf32> loc(#loc14)
    %15 = "top.Weight"() : () -> tensor<9xf32> loc(#loc15)
    %16 = "top.Conv"(%13, %14, %15) {auto_pad = "NOTSET", dilations = [1, 1], do_relu = false, group = 1 : i64, kernel_shape = [3, 3], pads = [1, 1, 1, 1], strides = [1, 1]} : (tensor<*xf32>, tensor<9x32x3x3xf32>, tensor<9xf32>) -> tensor<*xf32> loc(#loc16)
    %17 = "top.Reshape"(%16) {shape = [-1, 1, 3, 3, 224, 224]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc17)
    %18 = "top.Permute"(%17) {order = [0, 1, 4, 2, 5, 3]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc18)
    %19 = "top.Reshape"(%18) {shape = [-1, 1, 672, 672]} : (tensor<*xf32>) -> tensor<*xf32> loc(#loc19)
    return %19 : tensor<*xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("input")
#loc2 = loc("conv1.weight")
#loc3 = loc("conv1.bias")
#loc4 = loc("/conv1/Conv_output_0_Conv")
#loc5 = loc("/relu/Relu_output_0_Relu")
#loc6 = loc("conv2.weight")
#loc7 = loc("conv2.bias")
#loc8 = loc("/conv2/Conv_output_0_Conv")
#loc9 = loc("/relu_1/Relu_output_0_Relu")
#loc10 = loc("conv3.weight")
#loc11 = loc("conv3.bias")
#loc12 = loc("/conv3/Conv_output_0_Conv")
#loc13 = loc("/relu_2/Relu_output_0_Relu")
#loc14 = loc("conv4.weight")
#loc15 = loc("conv4.bias")
#loc16 = loc("/conv4/Conv_output_0_Conv")
#loc17 = loc("/pixel_shuffle/Reshape_output_0_Reshape")
#loc18 = loc("/pixel_shuffle/Transpose_output_0_Transpose")
#loc19 = loc("output_Reshape")
